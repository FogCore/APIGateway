# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
import grpc

from APIGateway import api_gateway_pb2 as APIGateway_dot_api__gateway__pb2


class UsersAPIStub(object):
    """Users Service methods used by the API Gateway
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.IsExist = channel.unary_unary(
                '/UsersAPI/IsExist',
                request_serializer=APIGateway_dot_api__gateway__pb2.User.SerializeToString,
                response_deserializer=APIGateway_dot_api__gateway__pb2.Response.FromString,
                )
        self.Create = channel.unary_unary(
                '/UsersAPI/Create',
                request_serializer=APIGateway_dot_api__gateway__pb2.User.SerializeToString,
                response_deserializer=APIGateway_dot_api__gateway__pb2.ResponseWithUser.FromString,
                )
        self.Verify = channel.unary_unary(
                '/UsersAPI/Verify',
                request_serializer=APIGateway_dot_api__gateway__pb2.User.SerializeToString,
                response_deserializer=APIGateway_dot_api__gateway__pb2.ResponseWithUser.FromString,
                )
        self.Info = channel.unary_unary(
                '/UsersAPI/Info',
                request_serializer=APIGateway_dot_api__gateway__pb2.User.SerializeToString,
                response_deserializer=APIGateway_dot_api__gateway__pb2.ResponseWithUser.FromString,
                )
        self.UpdateUserData = channel.unary_unary(
                '/UsersAPI/UpdateUserData',
                request_serializer=APIGateway_dot_api__gateway__pb2.User.SerializeToString,
                response_deserializer=APIGateway_dot_api__gateway__pb2.ResponseWithUser.FromString,
                )
        self.UpdatePassword = channel.unary_unary(
                '/UsersAPI/UpdatePassword',
                request_serializer=APIGateway_dot_api__gateway__pb2.User.SerializeToString,
                response_deserializer=APIGateway_dot_api__gateway__pb2.Response.FromString,
                )


class UsersAPIServicer(object):
    """Users Service methods used by the API Gateway
    """

    def IsExist(self, request, context):
        """Missing associated documentation comment in .proto file"""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Create(self, request, context):
        """Missing associated documentation comment in .proto file"""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Verify(self, request, context):
        """Missing associated documentation comment in .proto file"""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Info(self, request, context):
        """Missing associated documentation comment in .proto file"""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UpdateUserData(self, request, context):
        """Missing associated documentation comment in .proto file"""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UpdatePassword(self, request, context):
        """Missing associated documentation comment in .proto file"""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_UsersAPIServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'IsExist': grpc.unary_unary_rpc_method_handler(
                    servicer.IsExist,
                    request_deserializer=APIGateway_dot_api__gateway__pb2.User.FromString,
                    response_serializer=APIGateway_dot_api__gateway__pb2.Response.SerializeToString,
            ),
            'Create': grpc.unary_unary_rpc_method_handler(
                    servicer.Create,
                    request_deserializer=APIGateway_dot_api__gateway__pb2.User.FromString,
                    response_serializer=APIGateway_dot_api__gateway__pb2.ResponseWithUser.SerializeToString,
            ),
            'Verify': grpc.unary_unary_rpc_method_handler(
                    servicer.Verify,
                    request_deserializer=APIGateway_dot_api__gateway__pb2.User.FromString,
                    response_serializer=APIGateway_dot_api__gateway__pb2.ResponseWithUser.SerializeToString,
            ),
            'Info': grpc.unary_unary_rpc_method_handler(
                    servicer.Info,
                    request_deserializer=APIGateway_dot_api__gateway__pb2.User.FromString,
                    response_serializer=APIGateway_dot_api__gateway__pb2.ResponseWithUser.SerializeToString,
            ),
            'UpdateUserData': grpc.unary_unary_rpc_method_handler(
                    servicer.UpdateUserData,
                    request_deserializer=APIGateway_dot_api__gateway__pb2.User.FromString,
                    response_serializer=APIGateway_dot_api__gateway__pb2.ResponseWithUser.SerializeToString,
            ),
            'UpdatePassword': grpc.unary_unary_rpc_method_handler(
                    servicer.UpdatePassword,
                    request_deserializer=APIGateway_dot_api__gateway__pb2.User.FromString,
                    response_serializer=APIGateway_dot_api__gateway__pb2.Response.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'UsersAPI', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class UsersAPI(object):
    """Users Service methods used by the API Gateway
    """

    @staticmethod
    def IsExist(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/UsersAPI/IsExist',
            APIGateway_dot_api__gateway__pb2.User.SerializeToString,
            APIGateway_dot_api__gateway__pb2.Response.FromString,
            options, channel_credentials,
            call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Create(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/UsersAPI/Create',
            APIGateway_dot_api__gateway__pb2.User.SerializeToString,
            APIGateway_dot_api__gateway__pb2.ResponseWithUser.FromString,
            options, channel_credentials,
            call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Verify(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/UsersAPI/Verify',
            APIGateway_dot_api__gateway__pb2.User.SerializeToString,
            APIGateway_dot_api__gateway__pb2.ResponseWithUser.FromString,
            options, channel_credentials,
            call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Info(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/UsersAPI/Info',
            APIGateway_dot_api__gateway__pb2.User.SerializeToString,
            APIGateway_dot_api__gateway__pb2.ResponseWithUser.FromString,
            options, channel_credentials,
            call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def UpdateUserData(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/UsersAPI/UpdateUserData',
            APIGateway_dot_api__gateway__pb2.User.SerializeToString,
            APIGateway_dot_api__gateway__pb2.ResponseWithUser.FromString,
            options, channel_credentials,
            call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def UpdatePassword(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/UsersAPI/UpdatePassword',
            APIGateway_dot_api__gateway__pb2.User.SerializeToString,
            APIGateway_dot_api__gateway__pb2.Response.FromString,
            options, channel_credentials,
            call_credentials, compression, wait_for_ready, timeout, metadata)


class ImagesAPIStub(object):
    """Images Service methods used by the API Gateway
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.List = channel.unary_unary(
                '/ImagesAPI/List',
                request_serializer=APIGateway_dot_api__gateway__pb2.User.SerializeToString,
                response_deserializer=APIGateway_dot_api__gateway__pb2.ResponseWithImagesList.FromString,
                )
        self.Find = channel.unary_unary(
                '/ImagesAPI/Find',
                request_serializer=APIGateway_dot_api__gateway__pb2.Image.SerializeToString,
                response_deserializer=APIGateway_dot_api__gateway__pb2.ResponseWithImage.FromString,
                )
        self.Delete = channel.unary_unary(
                '/ImagesAPI/Delete',
                request_serializer=APIGateway_dot_api__gateway__pb2.Image.SerializeToString,
                response_deserializer=APIGateway_dot_api__gateway__pb2.Response.FromString,
                )


class ImagesAPIServicer(object):
    """Images Service methods used by the API Gateway
    """

    def List(self, request, context):
        """Missing associated documentation comment in .proto file"""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Find(self, request, context):
        """Missing associated documentation comment in .proto file"""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Delete(self, request, context):
        """Missing associated documentation comment in .proto file"""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_ImagesAPIServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'List': grpc.unary_unary_rpc_method_handler(
                    servicer.List,
                    request_deserializer=APIGateway_dot_api__gateway__pb2.User.FromString,
                    response_serializer=APIGateway_dot_api__gateway__pb2.ResponseWithImagesList.SerializeToString,
            ),
            'Find': grpc.unary_unary_rpc_method_handler(
                    servicer.Find,
                    request_deserializer=APIGateway_dot_api__gateway__pb2.Image.FromString,
                    response_serializer=APIGateway_dot_api__gateway__pb2.ResponseWithImage.SerializeToString,
            ),
            'Delete': grpc.unary_unary_rpc_method_handler(
                    servicer.Delete,
                    request_deserializer=APIGateway_dot_api__gateway__pb2.Image.FromString,
                    response_serializer=APIGateway_dot_api__gateway__pb2.Response.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'ImagesAPI', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class ImagesAPI(object):
    """Images Service methods used by the API Gateway
    """

    @staticmethod
    def List(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ImagesAPI/List',
            APIGateway_dot_api__gateway__pb2.User.SerializeToString,
            APIGateway_dot_api__gateway__pb2.ResponseWithImagesList.FromString,
            options, channel_credentials,
            call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Find(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ImagesAPI/Find',
            APIGateway_dot_api__gateway__pb2.Image.SerializeToString,
            APIGateway_dot_api__gateway__pb2.ResponseWithImage.FromString,
            options, channel_credentials,
            call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Delete(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ImagesAPI/Delete',
            APIGateway_dot_api__gateway__pb2.Image.SerializeToString,
            APIGateway_dot_api__gateway__pb2.Response.FromString,
            options, channel_credentials,
            call_credentials, compression, wait_for_ready, timeout, metadata)


class CloudletsAPIStub(object):
    """Cloudlets Service methods used by the API Gateway
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.Find = channel.unary_unary(
                '/CloudletsAPI/Find',
                request_serializer=APIGateway_dot_api__gateway__pb2.Cloudlet.SerializeToString,
                response_deserializer=APIGateway_dot_api__gateway__pb2.ResponseWithCloudletsList.FromString,
                )


class CloudletsAPIServicer(object):
    """Cloudlets Service methods used by the API Gateway
    """

    def Find(self, request, context):
        """Missing associated documentation comment in .proto file"""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_CloudletsAPIServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'Find': grpc.unary_unary_rpc_method_handler(
                    servicer.Find,
                    request_deserializer=APIGateway_dot_api__gateway__pb2.Cloudlet.FromString,
                    response_serializer=APIGateway_dot_api__gateway__pb2.ResponseWithCloudletsList.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'CloudletsAPI', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class CloudletsAPI(object):
    """Cloudlets Service methods used by the API Gateway
    """

    @staticmethod
    def Find(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/CloudletsAPI/Find',
            APIGateway_dot_api__gateway__pb2.Cloudlet.SerializeToString,
            APIGateway_dot_api__gateway__pb2.ResponseWithCloudletsList.FromString,
            options, channel_credentials,
            call_credentials, compression, wait_for_ready, timeout, metadata)


class SchedulingAPIStub(object):
    """Scheduling Service methods used by the API Gateway
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.CreateCluster = channel.unary_unary(
                '/SchedulingAPI/CreateCluster',
                request_serializer=APIGateway_dot_api__gateway__pb2.Cluster.SerializeToString,
                response_deserializer=APIGateway_dot_api__gateway__pb2.ResponseWithCluster.FromString,
                )
        self.ClusterState = channel.unary_unary(
                '/SchedulingAPI/ClusterState',
                request_serializer=APIGateway_dot_api__gateway__pb2.Cluster.SerializeToString,
                response_deserializer=APIGateway_dot_api__gateway__pb2.ResponseWithCluster.FromString,
                )
        self.RemoveCluster = channel.unary_unary(
                '/SchedulingAPI/RemoveCluster',
                request_serializer=APIGateway_dot_api__gateway__pb2.Cluster.SerializeToString,
                response_deserializer=APIGateway_dot_api__gateway__pb2.Response.FromString,
                )


class SchedulingAPIServicer(object):
    """Scheduling Service methods used by the API Gateway
    """

    def CreateCluster(self, request, context):
        """Missing associated documentation comment in .proto file"""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ClusterState(self, request, context):
        """Missing associated documentation comment in .proto file"""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def RemoveCluster(self, request, context):
        """Missing associated documentation comment in .proto file"""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_SchedulingAPIServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'CreateCluster': grpc.unary_unary_rpc_method_handler(
                    servicer.CreateCluster,
                    request_deserializer=APIGateway_dot_api__gateway__pb2.Cluster.FromString,
                    response_serializer=APIGateway_dot_api__gateway__pb2.ResponseWithCluster.SerializeToString,
            ),
            'ClusterState': grpc.unary_unary_rpc_method_handler(
                    servicer.ClusterState,
                    request_deserializer=APIGateway_dot_api__gateway__pb2.Cluster.FromString,
                    response_serializer=APIGateway_dot_api__gateway__pb2.ResponseWithCluster.SerializeToString,
            ),
            'RemoveCluster': grpc.unary_unary_rpc_method_handler(
                    servicer.RemoveCluster,
                    request_deserializer=APIGateway_dot_api__gateway__pb2.Cluster.FromString,
                    response_serializer=APIGateway_dot_api__gateway__pb2.Response.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'SchedulingAPI', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class SchedulingAPI(object):
    """Scheduling Service methods used by the API Gateway
    """

    @staticmethod
    def CreateCluster(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/SchedulingAPI/CreateCluster',
            APIGateway_dot_api__gateway__pb2.Cluster.SerializeToString,
            APIGateway_dot_api__gateway__pb2.ResponseWithCluster.FromString,
            options, channel_credentials,
            call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ClusterState(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/SchedulingAPI/ClusterState',
            APIGateway_dot_api__gateway__pb2.Cluster.SerializeToString,
            APIGateway_dot_api__gateway__pb2.ResponseWithCluster.FromString,
            options, channel_credentials,
            call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def RemoveCluster(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/SchedulingAPI/RemoveCluster',
            APIGateway_dot_api__gateway__pb2.Cluster.SerializeToString,
            APIGateway_dot_api__gateway__pb2.Response.FromString,
            options, channel_credentials,
            call_credentials, compression, wait_for_ready, timeout, metadata)
